# frozen_string_literal: true

class Detector
  # Detector::Citation attempts to identify citations based on the prevalence of individual sub-patterns. It is not
  # targeted at a particular citation format, but was designed based on characteristics of five formats: APA, MLA,
  # Chicago, Terabian, and IEEE.
  #
  # It receives a phrase (often from `Term.phrase`), which is parsed in various ways en route to calculating a final
  # score. Phrases with a higher score are more citation-like, while a score of 0 indicates a phrase that has no
  # hallmarks of being a citation.
  # Phrases whose score is higher than the REQUIRED_SCORE value can be registered as a Detection.
  class Citation
    attr_reader :features, :score, :patterns, :summary

    # shared singleton methods
    extend Detector::BulkChecker

    # The required score value is the threshold needed for a phrase to be officially recorded with a Detection via it's
    # associated Term.
    # Hint: set this to 0 in development environments if you want to temporarily see all output
    # of `.check_all_matches` rather than just the matches that met this threshold.
    REQUIRED_SCORE = 6

    # Summary thresholds are used by the calculate_score method. This class counts the number of occurrences of specific
    # characters in the @summary instance variable. The thresholds here determine whether any of those counts are high
    # enough to contribute to the phrase's citation score.
    SUMMARY_THRESHOLDS = {
      characters: 25,
      colons: 2,
      commas: 2,
      periods: 2,
      semicolons: 2,
      words: 5
    }.freeze

    # Detection? is a convenience method to check whether the calculated @score is high enough to qualify as a citation.
    #
    # @return boolean
    def detection?
      @score >= REQUIRED_SCORE
    end

    # The initializer handles the parsing of a phrase, and subsequent population of the @patterns, @summary,
    # and @score instance variables. @patterns contains all the citation components which have been flagged by the
    # CITATION_PATTERNS hash. @summary contains counts of how often certain characters or words appear in the phrase.
    # Finally, the @score value is a summary of how many elements in the patterns or summary report were detected.
    #
    # @note This method can be called directly via Detector::Citation.new(phrase). It is also called indirectly via the
    #       Detector::Citation.record(Term) instance method. This method can be called directly when a Detection is not
    #       desired.
    # @param phrase String. Often a `Term.phrase`.
    # @return Nothing intentional. Data is written to Hashes `@patterns`, `@summary`,
    #   and `@score` during processing.
    def initialize(phrase)
      f = Detector::Features.new(phrase)
      @features = f.features
      @patterns = f.patterns
      @summary = f.summary
      @score = calculate_score
    end

    def detections
      return unless detection?

      [@summary, @patterns, @score]
    end

    # The record method first runs all of the parsers by running the initialize method. If the resulting score is higher
    # than the REQUIRED_SCORE value, then a Detection is registered.
    # @param term [Term]
    # @return nil
    def self.record(term)
      cit = Detector::Citation.new(term.phrase)
      return unless cit.detection?

      Detection.find_or_create_by(
        term:,
        detector: Detector.where(name: 'Citation').first,
        detector_version: ENV.fetch('DETECTOR_VERSION', 'unset')
      )

      nil
    end

    private

    # This combines the two reports generated by the Citation detector (patterns and summary), and calculates the
    # final score value from their contents.
    #
    # Any detected subpattern is counted toward the score (multiple detections do not get counted twice). For example,
    # if the brackets pattern finds two matches, it still only adds one to the final score.
    #
    # For the summary report, each value is compared with a threshold value in the SUMMARY_THRESHOLDS constant. The
    # number of values which meet or exceed their threshold are added to the score. As an example, if a search phrase has
    # five words, this value is compared to the word threshold (also five). Because the threshold is met, the score gets
    # incremented by one.
    #
    # @return integer
    def calculate_score
      summary_score = @summary.count do |key, value|
        SUMMARY_THRESHOLDS.key?(key) && value >= SUMMARY_THRESHOLDS[key]
      end

      summary_score + @patterns.length
    end
  end
end
